- hosts: learnserver
  become: true

  vars_files:
    - vars.yml

  tasks:
  - name: update apt
    apt: update_cache=yes

  - name: ensure packages installed
    apt: 
      name:
        - lsb-release
        - curl
        - gpg
      state: present

#  - name: Download Redis GPG key
#    become: yes
#    shell: "curl -fsSL https://packages.redis.io/gpg | gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg"
#    args:
#      warn: false

  - name: Add Redis repository
    apt_repository:
      repo: "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb {{ ansible_distribution_release }} main"
      state: present

  - name: Update apt cache
    apt:
      update_cache: yes

  - name: create redis group
    group: name=redis state=present system=yes

  - name: create redis user
    user: name=redis group=redis createhome=no shell=/bin/false system=yes state=present

  - name: make sure that /etc/redis exists
    file: path=/etc/redis state=directory mode=0755

  - name: make sure that /var/db/redis exists
    file: path=/var/db/redis state=directory mode=0755 group=redis owner=redis

  - name: make sure redis.log file exists
    copy: src=templates/redis.log dest=/var/log/redis.log owner=redis group=redis mode=0644

  - name: Copy systemd service file
    copy:
      src: templates/upstart.conf
      dest: /etc/init.d/redis.conf
      owner: root
      group: root
      mode: '0644'

  - name: copy redis.conf file
    copy: src=templates/redis.conf dest=/etc/redis/redis.conf group=redis owner=redis

  - name: copy custom template
    template: src=templates/redis.local.conf.j2 dest=/etc/redis/redis.local.conf group=redis owner=redis

  - name: copy redis-local script
    template: src=templates/redis-local.j2 dest=/usr/local/bin/redis-local mode=0755

  - name: Install Redis
    apt:
      name: redis
      state: present

  - name: cleaning up build files
    command: rm -rf /tmp/{{ item }}
    with_items:
      - redis-stable
      - redis-stable.tar.gz

  - name: ensure redis service is restarted
    service: name=redis state=restarted

